name: Release & Build Docker Image to GHCR

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  release-and-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Make image name lowercase
      - name: Prepare image name (lowercase)
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # Install python-semantic-release
      - name: Install python-semantic-release
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release

      # Ensure initial tag exists for first release
      - name: Ensure initial tag exists
        run: |
          if [ -z "$(git tag --list)" ]; then
            git tag v0.0.0
            git push origin v0.0.0
          else
            echo "Initial tag already exists, skipping"
          fi

      # Run semantic release to determine next version
      - name: Semantic Release
        id: semantic_release
        run: semantic-release publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Save semantic version to environment variable
      - name: Save release version
        run: echo "RELEASE_VERSION=$(semantic-release version)" >> $GITHUB_ENV

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build Docker image and push with semantic version tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
